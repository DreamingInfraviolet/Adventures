
%{
    //Custom code goes here
    #include <string>
    #include <vector>
    #include "choice.h"
    #include "section.h"
    #include "scene.h"
    using namespace fabula;

    void yyerror (char const *s);

    extern int yylex();
    #define YYLEX yylex
    #define YYERROR_VERBOSE
    #define DPRINT(str) { fprintf(stdout, "Parsed Rule (%s)\n", str); }
    #define YYDEBUG 1

    extern int flexLineNo;
%}

%union
{
    char*                charstrval;
    std::string*         stringval;
    Section*             sectionval;
    String*              fstringval;
    Scene*               sceneval;
    std::vector<Choice*>* choicevectorval;
    Choice*              choiceval;
    int                  intval;
    Header*              headerval;
    Destination*         destinationval;
}

%locations

//Terminal symbols
%token <charstrval> tdiv
%token <charstrval> tbracket_curly_open
%token <charstrval> tbracket_curly_close
%token <charstrval> tbracket_square_open
%token <charstrval> tbracket_square_close
%token <charstrval> tscene
%token <charstrval> tidentifier
%token <charstrval> tstring
%token <charstrval> tignore
%token <charstrval> tchoice
%token <charstrval> tgoto
%token <charstrval> tfullstop

%type <sectionval>      S
%type <sectionval>      SECTION
%type <sectionval>      SECTION_DECLARATION
%type <headerval>       HEADER
%type <sceneval>        SCENE
%type <sceneval>        SCENE_DECLARATION
%type <sceneval>        SCENE_POSTHEADER
%type <choicevectorval> CHOICE_LIST
%type <choiceval>       CHOICE
%type <destinationval>  GOTO
%type <destinationval>  LOCATION
%type <intval>          LOCATION_PREFIX
%type <destinationval>  LOCATION_BODY

%%

S                   : SECTION                            { $$ = $1; DPRINT("S"); };


SECTION             :                                    { $$ = new Section(); DPRINT("SECTION"); }
                     | SECTION_DECLARATION SECTION       { $$ = $2; if($$) $$->add($1); DPRINT("SECTION"); }
                     | SCENE_DECLARATION SECTION         { $$ = $2; if($$) $$->add($1); DPRINT("SCENE"); }

SECTION_DECLARATION : tidentifier tbracket_square_open
                        SECTION tbracket_square_close    { $$ = $3; if($$) $$->name($1); DPRINT("SECTION_DECLARATION"); };

SCENE_DECLARATION   :tscene tidentifier
                         tbracket_curly_open SCENE
                         tbracket_curly_close            { $$ = $4; if($$) $$->name($2); DPRINT("SCENE_DECLARATION"); };

SCENE               : HEADER SCENE_POSTHEADER            { $$ = $2; if($$) $$->header($1); DPRINT("SCENE"); };

SCENE_POSTHEADER    : CHOICE_LIST                        { $$ = new Scene($1); DPRINT("SCENE_POSTHEADER"); }
                    | GOTO                               { $$ = new Scene($1); DPRINT("SCENE_POSTHEADER"); };

HEADER              : tstring                            { $$ = new Header($1); DPRINT("HEADER"); }
                    | tstring tstring                    { $$ = new Header($1, $2); DPRINT("HEADER"); };

CHOICE_LIST         :                                    { $$ = new std::vector<Choice*>(); DPRINT("CHOICE_LIST"); }
                    | CHOICE_LIST CHOICE                 { $$ = $1;
                                                           if($$) $$->push_back($2);DPRINT("CHOICE_LIST"); };

CHOICE              : tchoice tbracket_curly_open HEADER
                         GOTO tbracket_curly_close       { $$ = new Choice($3, $4); DPRINT("CHOICE"); };

GOTO                : tgoto LOCATION                     { $$ = $2; DPRINT("GOTO"); };

LOCATION            : LOCATION_PREFIX      LOCATION_BODY { $$ = $2; if($$) $$->backsteps($1); if($$) $$->relative(true ); DPRINT("LOCATION"); }
                    | LOCATION_PREFIX tdiv LOCATION_BODY { $$ = $3; if($$) $$->backsteps($1); if($$) $$->relative(false); DPRINT("LOCATION"); };

LOCATION_PREFIX      : { $$=0; }
                     | LOCATION_PREFIX tfullstop         { $$ = $1+1; DPRINT("LOCATION_PREFIX"); };


LOCATION_BODY        : LOCATION_BODY tdiv tidentifier    { $$ = new Destination(*$1, $3); delete $1; DPRINT("LOCATION_BODY"); }
                     | tidentifier                       { $$ = new Destination($1); DPRINT("LOCATION_BODY"); };

%%
void yyerror (char const *s)
{
  fprintf (stderr, "Parsing error at %d: %s\n", flexLineNo, s);
}